#!/usr/bin/env python3

# Copyright (C) 2012-2015  ASTRON (Netherlands Institute for Radio Astronomy)
# P.O. Box 2, 7990 AA Dwingeloo, The Netherlands
#
# This file is part of the LOFAR software suite.
# The LOFAR software suite is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# The LOFAR software suite is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with the LOFAR software suite. If not, see <http://www.gnu.org/licenses/>.

from lofar.common.cep4_utils import *
from subprocess import call
import socket
import logging
import signal
from lofar.common import isProductionEnvironment, isTestEnvironment
logger = logging.getLogger(__name__)

def kill_zombies():
    # kill any lingering webservice instances
    cmd = ['pkill', '-9', '-f "python /opt/adder/cluster/webservice.py"']
    cmd = wrap_command_in_cep4_head_node_ssh_call(cmd)
    logger.info('killing any lingering qa webservice service on cep4 head node: %s', ' '.join(cmd))
    call(cmd)


if __name__ == '__main__':
    logging.basicConfig(format='%(asctime)s %(levelname)s %(message)s', level=logging.INFO)

    if isProductionEnvironment() and 'scu001' not in socket.getfqdn():
        logger.warning("qa_webservice is designed to run only on scu001 (and then start a docker image on head01)")
        exit(1)
    elif isTestEnvironment() and 'scu199' in socket.getfqdn():
        logger.warning("qa_webservice is designed to run only on scu001 (and then start a docker image on head01). No further need to run this service on scu199. Exiting with code 0.")
        exit(0)

    kill_zombies()

    def signal_handler(_s, _f):
        kill_zombies()
        exit(1)

    for s in [signal.SIGHUP, signal.SIGINT, signal.SIGTERM]:
        signal.signal(s, signal_handler)


    cmd = ['python', '/opt/adder/cluster/webservice.py']
    cmd = wrap_command_for_docker(cmd, 'adder_clustering', 'latest', ['/qa', '/data/share', '/data/scratch', '/data/parsets'])
    cmd = wrap_command_in_cep4_head_node_ssh_call(cmd)

    logger.info('starting webservice on cep4 head node: %s', ' '.join(cmd))

    exit(call(cmd))
