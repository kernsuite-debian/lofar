#!/usr/bin/env python3

# Copyright (C) 2012-2015  ASTRON (Netherlands Institute for Radio Astronomy)
# P.O. Box 2, 7990 AA Dwingeloo, The Netherlands
#
# This file is part of the LOFAR software suite.
# The LOFAR software suite is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# The LOFAR software suite is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with the LOFAR software suite. If not, see <http://www.gnu.org/licenses/>.

import logging
logger = logging.getLogger(__name__)

from lofar.common.cep4_utils import *
from subprocess import call
from lofar.sas.resourceassignment.resourceassignmentservice.rpc import RADBRPC
from lofar.messaging import ToBus, EventMessage, DEFAULT_BROKER, adaptNameToEnvironment
from optparse import OptionParser, OptionGroup
from datetime import datetime, timedelta

if __name__ == '__main__':
    # Check the invocation arguments
    parser = OptionParser("%prog -o <otdb_id>",description='enqueue a conversion from MS to hdf5, cluster the baselines, and create the default plots in the qa_service.')
    group = OptionGroup(parser, 'Messaging options')
    group.add_option('-b', '--broker', dest='broker', type='string', default=DEFAULT_BROKER,
                     help='Address of the messaging broker, default: %default')
    group.add_option('-q', "--queue", dest="queue", type="string",
                     default=adaptNameToEnvironment('lofar.queue.for.qa_service.QAFilteredOTDBBusListener.on.filtered.OTDB.notification.TaskStatus'),
                     help="queue where the QAService listens for the notification messages. [default: %default]")
    group.add_option('-o', '--otdb_id', dest="otdb_id", type="int",
                     help="the otdb_id of the task which needs to be enqueued for qa plots")
    group.add_option('-a', '--all', dest="all", action='store_true',
                     help="enqueue all tasks which were not converted yet in the past two weeks. (pipelines are prioritized 2 below observations)")
    group.add_option('-p', '--priority', dest="priority", type="int", default=4,
                     help="priority of the enqueued task. (low=0, normal=4, high=9) [default: %default]")
    parser.add_option_group(group)
    (options, args) = parser.parse_args()

    if (not options.otdb_id and not options.all) or (options.otdb_id and options.all):
        print(parser.print_help())
        exit(-1)

    options.priority = min(9, max(1, options.priority))

    if options.all:
        with RADBRPC.create(broker=options.broker) as rpc:
            tasks = rpc.getTasks(lower_bound=datetime.utcnow()-timedelta(days=14), task_type=['observation','pipeline'], task_status=['finished'])
            otdb_id_priorities = [(t['otdb_id'], options.priority if t['type']=='observation' else max(1, options.priority-2))
                                  for t in tasks]
    else:
        otdb_id_priorities = [(options.otdb_id, options.priority)]

    #config logging
    logging.basicConfig(format='%(asctime)s %(levelname)s %(message)s', level=logging.INFO)

    with ToBus(exchange='', broker=options.broker) as tobus:
        for otdb_id, priority in otdb_id_priorities:
            plots_path = '/qa/plots/L%s' % otdb_id
            cmd = ['ls', plots_path, '>&', '/dev/null']
            cmd = wrap_command_in_cep4_head_node_ssh_call(cmd)

            if call(cmd, stdout=None, stderr=None) != 0:
                for status in ['completing', 'finished']:
                    content = {"treeID": otdb_id, "state": status, "time_of_change": datetime.utcnow() }
                    msg = EventMessage(subject=options.queue, content=content, priority=priority)
                    logging.info("sending: %s", msg)
                    tobus.send(msg)
