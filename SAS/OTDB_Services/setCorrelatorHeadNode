#!/usr/bin/env python
# coding: iso-8859-15
#
# Copyright (C) 2015
# ASTRON (Netherlands Institute for Radio Astronomy)
# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
#
# This file is part of the LOFAR software suite.
# The LOFAR software suite is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# The LOFAR software suite is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with the LOFAR software suite. If not, see <http://www.gnu.org/licenses/>.
#
# $Id: getOTDBParset 34753 2016-06-20 10:43:42Z schaap $
"""

"""

from lofar.sas.otdb.otdbrpc import OTDBRPC

if __name__ == "__main__":
    from optparse import OptionParser
    import logging
    import sys

    logging.basicConfig(stream=sys.stdout, level=logging.WARNING)
    logger = logging.getLogger(__name__)

    # Check the invocation arguments
    parser = OptionParser("%prog -o obsid [--cobalt1 or --cobalt2]")
    parser.add_option("-o", "--obsid", dest="obsid", type="int", default=0,
                      help="Observation ID to change the correlator headnode for.")
    parser.add_option("-1", "--cobalt1", dest="cobalt1", action='store_true',
                      help="Change the correlator headnode the given observation to cobalt1")
    parser.add_option("-2", "--cobalt2", dest="cobalt2", action='store_true',
                      help="Change the correlator headnode the given observation to cobalt2")
    (options, args) = parser.parse_args()

    if not options.obsid or (not options.cobalt1 and
                             not options.cobalt2) or (options.cobalt1 and options.cobalt2):
        parser.print_help()
        sys.exit(1)

    with OTDBRPC() as otdbrpc:
        if options.cobalt1:
            otdbrpc.taskSetSpecification(options.obsid, {'LOFAR.ObsSW.Observation.ObservationControl.OnlineControl.CorrAppl._hostname': 'cbmmaster',
                                                         'LOFAR.ObsSW.Observation.ObservationControl.OnlineControl.CorrAppl.CorrProc._hostname': 'cbmmaster'})
        elif options.cobalt2:
            otdbrpc.taskSetSpecification(options.obsid, {'LOFAR.ObsSW.Observation.ObservationControl.OnlineControl.CorrAppl._hostname': 'cbm2head.control.lofar',
                                                         'LOFAR.ObsSW.Observation.ObservationControl.OnlineControl.CorrAppl.CorrProc._hostname': 'cbm2head.control.lofar'})

        parset = otdbrpc.taskGetSpecification(otdb_id=options.obsid)["specification"]

        print('New keys for ', options.obsid)

        for key in ['ObsSW.Observation.ObservationControl.OnlineControl.CorrAppl._hostname',
                    'ObsSW.Observation.ObservationControl.OnlineControl.CorrAppl.CorrProc._hostname']:
            print("%s = %s" % (key, parset[key]))
