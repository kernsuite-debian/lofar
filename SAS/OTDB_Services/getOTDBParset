#!/usr/bin/env python3
#coding: iso-8859-15
#
# Copyright (C) 2015
# ASTRON (Netherlands Institute for Radio Astronomy)
# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
#
# This file is part of the LOFAR software suite.
# The LOFAR software suite is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# The LOFAR software suite is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with the LOFAR software suite. If not, see <http://www.gnu.org/licenses/>.
#
# $Id$
"""

"""

from lofar.messaging import DEFAULT_BROKER, DEFAULT_BUSNAME
from lofar.sas.otdb.otdbrpc import OTDBRPC

if __name__ == "__main__":
    from optparse import OptionParser
    import logging
    import sys

    logging.basicConfig(stream=sys.stdout, level=logging.INFO)
    logger = logging.getLogger(__name__)

    # Check the invocation arguments
    parser = OptionParser("%prog -o obsid [options]")
    parser.add_option('-b', '--broker', dest = 'broker', type = 'string', default = DEFAULT_BROKER, help = 'Address of the broker, default: %default')
    parser.add_option('-e', '--exchange', dest = 'exchange', type = 'string', default = DEFAULT_BUSNAME, help = 'Name of the bus exchange on the broker, default: %s' % DEFAULT_BUSNAME)
    parser.add_option("-o", "--obsid", dest="obsid", type="int", default=0,
                      help="Observation/tree ID to get parset of")
    (options, args) = parser.parse_args()

    if not options.exchange or not options.obsid:
        parser.print_help()
        sys.exit(1)

    with OTDBRPC.create(exchange=options.exchange) as otdbrpc:
        parset = otdbrpc.taskGetSpecification(otdb_id=options.obsid)["specification"]

    for key in sorted(parset.keys()):
        print("%s = %s" % (key,parset[key]))

