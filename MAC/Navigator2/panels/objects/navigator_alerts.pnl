V 13
1
LANG:1 0 
PANEL,-1 -1 1213 163 N "_3DFace" 1
"$name"
"main() {
  
  //delay while navigator instance is being prepared, shouldn't be needed, but this way we at least have a trigger when something goes wrong
  int retry=0;
  while (navigator_initializing() & retry < 120) {
    delay(0,100);
    retry++;
    if (retry >= 120) {
      LOG_FATAL(\"navigator_alerts.pnl:initialize|alarmTable retry longer then 4 minutes, navigatorInstance still not ready?\");
      break;
    }
  }
  
  // Check if Action point exists and connect to it if
  // it does. The action Point is the call back for this object
  itsActionDp    = DPNAME_NAVIGATOR + g_navigatorID + \".\"+$name+\".action\";
  itsEventDp     = DPNAME_NAVIGATOR + g_navigatorID + \".\"+$name+\".event\";
  itsSelectionDp = DPNAME_NAVIGATOR + g_navigatorID + \".\"+$name+\".selection\";

  if ( dpExists(itsActionDp) ) {
    dpConnect(\"doAction\",false,itsActionDp);
    ALERTSACTIONDP=itsActionDp;
  }      
}

void initialize() {
//  if (dpExists(DPNAME_NAVIGATOR + g_navigatorID+\".alarmsTrigger\")) {
//    dpConnect(\"alarmTrigger\",true,DPNAME_NAVIGATOR + g_navigatorID+\".alarmsTrigger\");
//  } else {
//    LOG_ERROR(\"navigator_alerts.pnl:initialize|Error connecting to alarmsTriggerpoint in navigator Instance.\");
//  }
}

//void alarmTrigger(string dp1, bool T) {
//  LOG_TRACE(\"navigator_alerts.pnl:initialize|alarmTrigger received.\");
//  redraw_table();
//}

//
// Callback for dpConnect to action point.
// If there is an action required this point will tell so
//
void doAction(string aDP, string anAction) {

  LOG_TRACE(\"navigator_alerts.pnl:doAction|Action found:\" + anAction);
  
  // split action into essentials
  dyn_string actionString;
  if (!navFunct_splitAction(anAction,actionString)) {
    return;
  }
  
  LOG_DEBUG(\"navigator_alerts.pnl:doAction|found actionString: \" + actionString);
  // ChangeSelection requires 1 param and will change itsSelection and calls initTable again
  if (actionString[1] == \"Initialize\") {
    initialize();
    return;
  }
}" 0
 E E E E 1 -1 -1 0  27 42
""0  1
E "#uses \"navigator.ctl\"

//Global mainpoint holders
string 			itsActionDp	= \"\";
string 			itsEventDp      = \"\";
dyn_string 	itsSelectionDp  = \"\";

" 0
 3
"CBRef" "1"
"EClose" E
"dpi" "96"
0 0 0
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:1 0 
1 1 0 "0" 18
31 "transform" 0 0 1 0 1 108 -32.1428571428569
0
1 2 0 "0" 19
31 "transform" 0 0 1 0 1 108 -32.1428571428569
0
1 3 0 "0" 24
31 "transform" 0 0 1 0 1 108 -32.1428571428569
0
1 12 0 "0" 21
31 "transform" 0 0 1 0 1 108 -32.14285714285715
0
1 13 0 "0" 22
31 "transform" 0 0 1 0 1 108 -32.14285714285715
0
1 15 0 "0" 1
1 "rightClick" 1 1 "main(int row, string column)
{
  int i, j;
  anytype value;
  mapping mTableMultipleRows;
  
  if (row < 0 || column < 0) return;
  
  //IM 116642: Trigger table widget once, to avoid timing problems
  int top, bot;
  getValue(\"\", \"lineRangeVisible\", top, bot);
  
  synchronized(g_bTableLineSynchronisation)
  { 
    int length;
    dyn_anytype alertRow;  
    
    getValue( \"\", \"currentCell\", row, column );
    value=this.cellValue;

    alertRow = this.getLineN(row);
    length = dynlen(alertRow);
    
    for(j=0; j<this.lineCount; j++)
    {
      mapping rowHeaderMapping;
      
      for(i=1; i<=length; i++)
        rowHeaderMapping[this.columnName(i-1)] = alertRow[i];
      
      mTableMultipleRows[j] = rowHeaderMapping;
    }
  }
  

  //DebugTN(\"rClicked this.name,value:\"+this.name+\" \"+value);
  aes_onRightClick( g_propDpNameTop, AESTAB_TOP, this.name, row, column, value, mTableMultipleRows );
  //rClick(value);
}" 0
 
1 "doubleClick" 1 1 "main()
{
  int row, column;
  anytype value;
  mapping mTableRow;
  
  synchronized(g_bTableLineSynchronisation)
  { 
    int length;
    dyn_anytype alertRow;  
    
    // determine position 
    getValue(\"\",\"currentCell\", row, column );
    value=this.cellValue;

    alertRow = this.getLineN(row);
    length = dynlen(alertRow);
    for(int i=1; i<=length; i++)
      mTableRow[this.columnName(i-1)] = alertRow[i];
  }
 
  //if( mappingHasKey( mTableRow, \"elementName\" ) )
  //{
  //  DebugTN( __FILE__ + \"(): table double clicked!!\", row, column, \"elementName: \" + mTableRow[\"elementName\"] );   
  //  dblClick(mTableRow[\"elementName\"]);
  //}
}" 0
 
1 "textFieldOut" 1 1 "main(int row, string column, string value)
{
  mapping mTableRow;
  string newValue;
  synchronized(g_bTableLineSynchronisation)
  { 
    int length;
    dyn_anytype alertRow;  
    
    getValue( \"\", \"currentCell\", row, column );
    newValue=this.cellValue;
    
    alertRow = this.getLineN(row);
    
    length = dynlen(alertRow);
    for(int i=1; i<=length; i++)
      mTableRow[this.columnName(i-1)] = alertRow[i];
  }
  DebugTN( \"click !!!!!!!!!!!!!!!!!!   value: \" + newValue );
  //read pos of visible lines
  setMultiValue( \"ar_currentLine\", \"text\", row+1); // \"current line\" -indicator is 1 based

//  if( mappingHasKey( mTableRow, \"elementName\" ) )
//  {
//    DebugTN( __FILE__ + \"(): table clicked!!\", row, column, \"elementName: \" + mTableRow[\"elementName\"] );   
//    click(mTableRow[\"elementName\"]);
//  }
  aes_doColumnClick( AESTAB_TOP, row, column, value, mTableRow );
}
" 0
 
31 "transform" 0 0 1.111074694097082 0 3.504548263617748 -13.49918061718435 -133.0784496083959
18 "font" 0 0 4
LANG:1 26 Arial,-1,11,5,50,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0 
0
0
LAYER, 1 
1
LANG:1 0 
0
LAYER, 2 
1
LANG:1 0 
0
LAYER, 3 
1
LANG:1 0 
0
LAYER, 4 
1
LANG:1 0 
0
LAYER, 5 
1
LANG:1 0 
0
LAYER, 6 
1
LANG:1 0 
0
LAYER, 7 
1
LANG:1 0 
0
3 0 "PANEL_REF0" -1
"" ""
"objects/STD_PANELS/AESRow.pnl" 27 42 T 0 1 0 1.071428571428571 -15.5 -35.99999999999999
1
"$AESREGDOLLAR_SCREENTYPE""aes_alertRow_Navigator"
0
