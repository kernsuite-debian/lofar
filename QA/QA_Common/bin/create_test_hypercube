#!/usr/bin/env python3

import os
from optparse import OptionParser, OptionGroup
from lofar.qa.utils import *
from lofar.qa.hdf5_io import write_hypercube

import logging
logger = logging.getLogger(__name__)

def main():
    # make sure we run in UTC timezone
    os.environ['TZ'] = 'UTC'

    ## Check the invocation arguments
    parser = OptionParser(usage='create_test_hypercube [options] <path_to_new_h5_file>',
                          description='creates a test h5 hypercube with random data for the given number of stations, saps, subbands, timestamps.')
    group = OptionGroup(parser, 'Dimensions')
    group.add_option('-S', '--stations', dest='stations', type='int', default=3, help='number of stations to create (min=2), default: %default')
    group.add_option('-s', '--subbands', dest='subbands', type='int', default=244, help='number of subbands (per sap) to create, default: %default')
    group.add_option('-t', '--timestamps', dest='timestamps', type='int', default=128, help='number of timestamps to create, default: %default')
    group.add_option('--saps', dest='saps', type='int', default=1, help='number of saps to create, default: %default')
    parser.add_option_group(group)

    group = OptionGroup(parser, 'General signal options')
    group.add_option('--snr', dest='snr', type='float', default=0.9, help='signal to noise ratio. The signal is a test image with a full sweep through all phase and amplitudes from [0..1], and the noise is just random complex numbers, default: %default')
    group.add_option('-a', '--amplitude', dest='max_signal_amplitude', type='float', default=100, help='the max signal amplitude, default: %default')
    group.add_option('-p', '--pol-ratio', dest='parallel_to_cross_polarization_ratio', type='float', default=1, help='the amplitude ratio between parallel and cross polarization, default: %default')
    parser.add_option_group(group)

    group = OptionGroup(parser, 'Specific signal options')
    group.add_option('--pw', '--num_phase_wraps', dest='num_phase_wraps', type='float', default=1, help='the number of times the phase wraps around 2pi along the freq/sb axis, default: %default')
    group.add_option('--tsp', '--num_time_sawtooth_periods', dest='num_time_sawtooth_periods', type='float', default=1, help='the number of periods for the sawtooth signal along the time axis, default: %default')
    group.add_option('--ssp', '--num_subband_sawtooth_periods', dest='num_subband_sawtooth_periods', type='float', default=0, help='the number of periods for the sawtooth signal along the subband/frequency axis, default: %default')
    group.add_option('--tcp', '--num_time_cos_periods', dest='num_time_cos_periods', type='float', default=0, help='the number of periods for the cosine signal along the time axis, default: %default')
    group.add_option('--scp', '--num_subband_cos_periods', dest='num_subband_cos_periods', type='float', default=0, help='the number of periods for the cosine signal along the subband/frequency axis, default: %default')
    parser.add_option_group(group)

    group = OptionGroup(parser, 'Miscellaneous')
    group.add_option('-o', '--otdb_id', dest='otdb_id', type='int', default=None, help='optional (fake/test) otdb id, default: %default')
    group.add_option('-V', '--verbose', dest='verbose', action='store_true', help='Verbose logging')
    parser.add_option_group(group)

    (options, args) = parser.parse_args()

    if len(args) != 1:
        print('Please provide a file name for the h5 file which you want to create...\n')
        parser.print_help()
        exit(1)

    logging.basicConfig(format='%(asctime)s %(name)s %(levelname)s %(message)s',
                        level=logging.DEBUG if options.verbose else logging.INFO)

    if options.stations < 2:
        print('setting number of stations to minimum of 2')
        options.stations = 2

    cube = create_hypercube(num_stations=options.stations,
                            num_saps=options.saps,
                            num_subbands_per_sap={sap:options.subbands for sap in range(options.saps)},
                            num_timestamps=options.timestamps,
                            snr=options.snr,
                            max_signal_amplitude = options.max_signal_amplitude,
                            parallel_to_cross_polarization_ratio= options.parallel_to_cross_polarization_ratio,
                            num_phase_wraps=options.num_phase_wraps,
                            num_time_sawtooth_periods=options.num_time_sawtooth_periods,
                            num_subband_sawtooth_periods=options.num_subband_sawtooth_periods,
                            num_time_cos_periods=options.num_time_cos_periods,
                            num_subband_cos_periods=options.num_subband_cos_periods)

    write_hypercube(args[0], cube, sas_id=options.otdb_id)

if __name__ == '__main__':
    main()
