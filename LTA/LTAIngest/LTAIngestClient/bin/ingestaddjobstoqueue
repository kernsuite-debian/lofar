#!/usr/bin/env python3

import os
import os.path
import fnmatch
import logging
from optparse import OptionParser
from lofar.messaging import CommandMessage, ToBus, DEFAULT_BROKER, DEFAULT_BUSNAME
from lofar.lta.ingest.server.config import DEFAULT_INGEST_INCOMING_JOB_SUBJECT
from lofar.lta.ingest.common.job import parseJobXml

logger = logging.getLogger(__name__)


if __name__ == '__main__':
    # Check the invocation arguments
    parser = OptionParser("%prog [options] <path_to_jobfile.xml>/<dir_containing_jobfiles>",
                          description='Send the given jobfile or all jobfiles in the given directory to the ingest job queue.')
    parser.add_option('-b', '--broker', dest='broker', type='string', default=DEFAULT_BROKER, help='Address of the qpid broker, default: %default')
    parser.add_option('-e', '--exchange', dest='exchange', type='string', default=DEFAULT_BUSNAME, help='Name of the bus exchange on the broker on which the ingest messages are published, default: %default')
    parser.add_option('-p', '--priority', dest='priority', type='int', default=None, help='set the priority of the job(s) to given priority (0=paused, 1=lowest ... 9=highest, None=use priority given in jobfile.). default=%default')
    (options, args) = parser.parse_args()

    logging.basicConfig(format='%(asctime)s %(levelname)s %(message)s',
                        level=logging.INFO)

    if len(args) != 1:
        parser.print_help()
        exit(1)

    if options.priority is not None:
        options.priority = min(9, max(0, options.priority))

    def sendJobFiles(jobfile_paths):
        try:
            with ToBus(exchange=options.exchange, broker=options.broker) as bus:
                for jobfile_path in jobfile_paths:
                    try:
                        with open(jobfile_path) as file:
                            file_content = file.read()
                            job = parseJobXml(file_content)

                            if job:
                                if options.priority is not None:
                                    job['priority'] = options.priority

                                msg = CommandMessage(subject=DEFAULT_INGEST_INCOMING_JOB_SUBJECT, content=file_content)
                                msg.priority=int(job.get('priority', 4))
                                bus.send(msg)
                                logger.info('submitted job %s to exchange %s with subject %s at broker %s',
                                            job['JobId'], bus.exchange, msg.subject, bus.broker)
                    except Exception as e:
                        logger.error(e)
        except Exception as e:
            logger.error(e)

    def sendJobFile(jobfile_path):
        sendJobFiles([jobfile_path])

    def sendJobFilesInDir(jobfiles_dir_path):
        files = os.listdir(jobfiles_dir_path)
        xml_files = [os.path.join(jobfiles_dir_path, f) for f in files if fnmatch.fnmatch(f, '*.xml*')]
        sendJobFiles(xml_files)

    try:
        path = args[0]

        if os.path.isfile(path):
            sendJobFile(path)
        elif os.path.isdir(path):
            sendJobFilesInDir(path)
        else:
            logger.error('given path is not a file or directory: %s', path)
            exit(1)
    except Exception as e:
        logger.error(e)
        exit(1)
