#!/usr/bin/env python3
# Copyright (C) 2012-2013  ASTRON (Netherlands Institute for Radio Astronomy)
# P.O. Box 2, 7990 AA Dwingeloo, The Netherlands
#
# This file is part of the LOFAR software suite.
# The LOFAR software suite is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# The LOFAR software suite is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with the LOFAR software suite. If not, see <http://www.gnu.org/licenses/>.
#
# id.. TDB
"""Very basic messagebus router that routs the messages according to the settings in Router.conf
"""

import logging
logger = logging.getLogger(__name__)

#TODO: replace MessageRouter, and just configure the qpid broker to provide the same functionality.
logger.warning("MessageRouter is deprecated and should/will be replaced by using the qpid-broker's functionality to copy messages to multiple queue's.")

import lofar.messagebus.messagebus as messagebus
import lofar.messagebus.message as message
from lofar.common.util import waitForInterrupt

import threading
from configparser import ConfigParser
import os.path
import sys
from datetime import datetime


class BusMulticast(threading.Thread):
  """
  Sets up the router from one inbus to several outbusses
  """
  def __init__(self, source, destlist):
    threading.Thread.__init__(self)
    self.source   = source
    self.destlist = destlist
    self.done     = False
    logger.info("Setting up multicast from %s to %s" % (self.source, self.destlist))

  def stop(self):
    self.done     = True

  def run(self):
    logger.info("Starting multicast from %s to %s" % (self.source, self.destlist))

    try:
      inbus = messagebus.FromBus(self.source)
      outbusses = [messagebus.ToBus(dest) for dest in self.destlist]

      logger.info("[%s] Forwarding to %s" % (self.source,self.destlist))

      while not self.done:
        # TODO: Use a transaction (not supported yet in qpid 0.30)
        msg = inbus.get(1.0)
        if msg is None:
          # timeout
          continue

        try:
          content = msg.content()
          logger.info("[%s] [%s] Message received" % (self.source, content))
        except Exception as e:
          content = "<unknown>"
          logger.warning("[%s] Non-compliant message received" % (self.source,))

        for outbus in outbusses:
          outbus.send(msg)
        inbus.ack(msg)

        logger.info("[%s] [%s] Forwarded to %s" % (self.source, content, self.destlist))

    except Exception as e:
      logger.fatal("[%s] Caught exception: %s" % (self.source, e))

      # Abort everything, to avoid half-broken situations
      exit(1)

    logger.info("[%s] Done" % (self.source,))

class RouterConfig(ConfigParser):
  """
    Router configuration. Example:

    [multicast]
    source-queue-1: dest-queue-1, dest-queue2
    source-queue-2: dest-queue-3

    NOTE: Once we have python 2.6+ on ccu001 and ccu099, we could override the dict_type in the RawConfigParser
    and allow multiple source: dest lines to accumulate.
  """
  def __init__(self, filename=None):
    ConfigParser.__init__(self)

    # set defaults
    self.add_section('multicast')

    # read configuration
    if filename is not None:
      self.read(filename)

  def read(self, filename):
    logger.info("[RouterConfig] Considering reading %s" % (filename,))
    if not os.path.isfile(filename):
      logger.info("[RouterConfig] not found...: %s" % (filename,))
      return False

    logger.info("[RouterConfig] Reading %s" % (filename,))
    ConfigParser.read(self, filename)
    logger.info("[RouterConfig] Read %s" % (filename,))
    return True

  def sources(self):
    return self.options('multicast')

  def destinations(self, source):
    return [field.strip() for field in self.get('multicast', source).split(',')]

if __name__ == "__main__":
  """
    Apply the routing specified in MessageRouter.conf and MessageRouter.conf.`hostname`;
    both configration files are found in $LOFARROOT/etc.
    The file in the current working dir takes precedence over $LOFARROOT/etc

    Application runs forever, regardless of the number of routes. Also runs
    forever if no routing is required, to keep behaviour consistent across
    nodes.
  """
  import os
  import platform
  import time

  logging.basicConfig(format='%(asctime)s %(levelname)s %(message)s', level=logging.INFO)

  logger.info("Starting MessageRouter")

  def hostname():
    possibly_fqdn = platform.node().lower()
    if '.' in possibly_fqdn:
      return possibly_fqdn.split('.')[0]
    else:
      return possibly_fqdn

  # always read MessageRouter.conf from current working directory if present
  # otherwise try it from $LOFARROOT/etc
  if "LOFARROOT" in os.environ and not os.path.exists("MessageRouter.conf"):
    path = os.path.expandvars("$LOFARROOT/etc")
  else:
    path = "."

  # read default config file
  config = RouterConfig('%s/MessageRouter.conf' % path)

  # read host-specific config file
  my_configfile = '%s/MessageRouter.conf.%s' % (path, hostname())
  logger.info("Reading configuration file %s" % my_configfile)
  config.read(my_configfile)

  threadlist = []

  # set up router
  for source in config.sources():
    destlist = config.destinations(source)

    t = BusMulticast(source, destlist)
    t.start()
    threadlist.append(t)


  logger.info("[main] Running %s threads" % (len(threadlist),))

  waitForInterrupt()

  logger.info("[main] Shutting down")

  # signal end of processing
  for t in threadlist:
    t.stop()

  # wait for join (forever)
  for t in threadlist:
    t.join()

  logger.info("[main] Done")
