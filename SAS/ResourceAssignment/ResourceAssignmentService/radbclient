#!/usr/bin/env python3

# Copyright (C) 2017
# ASTRON (Netherlands Institute for Radio Astronomy)
# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
#
# This file is part of the LOFAR software suite.
# The LOFAR software suite is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# The LOFAR software suite is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with the LOFAR software suite. If not, see <http://www.gnu.org/licenses/>.

# $Id: radbclient 33373 2016-01-22 11:01:15Z schaap $

'''
do requests to the radbservice from the commandline
'''
import sys
import logging
from optparse import OptionParser
from lofar.sas.resourceassignment.resourceassignmentservice.rpc import RADBRPC
from lofar.messaging import DEFAULT_BROKER, DEFAULT_BUSNAME

logger = logging.getLogger(__name__)

if __name__ == '__main__':
    # Check the invocation arguments
    parser = OptionParser('%prog [options]',
                          description='do requests to the radbservice from the commandline')
    parser.add_option('-b', '--broker', dest='broker', type='string', default=DEFAULT_BROKER, help='Address of the messaging broker, default: %default')
    parser.add_option('-e', '--exchange', dest='exchange', type='string', default=DEFAULT_BUSNAME, help='Name of the bus exchange on the broker, default: %default')
    parser.add_option('-V', '--verbose', dest='verbose', action='store_true', help='verbose logging')
    parser.add_option('-t', '--task', dest='task', type='int', help='get the task with given id')
    parser.add_option('-T', '--tasks', dest='tasks', action='store_true', help='get all tasks')
    parser.add_option('-c', '--resource_claim', dest='resource_claim', type='int', help='get the resource claim with given id')
    parser.add_option('-C', '--resource_claims', dest='resource_claims', action='store_true', help='get all resource claims')
    (options, args) = parser.parse_args()

    if len(sys.argv) == 1:
        parser.print_help()

    logging.basicConfig(format='%(asctime)s %(levelname)s %(message)s',
                        level=logging.INFO if options.verbose else logging.WARN)

    with RADBRPC.create(exchange=options.exchange, broker=options.broker) as rpc:
        if options.task:
            print(rpc.getTask(options.task))

        if options.tasks:
            for task in rpc.getTasks():
                print(task)

        if options.resource_claim:
            print(rpc.getResourceClaim(options.resource_claim))

        if options.resource_claims:
            for task in rpc.getResourceClaims():
                print(task)
